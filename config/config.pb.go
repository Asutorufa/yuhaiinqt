// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/config.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Setting struct {
	BlackIcon            bool       `protobuf:"varint,1,opt,name=BlackIcon,json=black_icon,proto3" json:"BlackIcon,omitempty"`
	DOH                  bool       `protobuf:"varint,2,opt,name=DOH,json=is_dns_over_https,proto3" json:"DOH,omitempty"`
	DNSProxy             bool       `protobuf:"varint,3,opt,name=DNSProxy,json=dns_across_proxy,proto3" json:"DNSProxy,omitempty"`
	DnsServer            string     `protobuf:"bytes,4,opt,name=DnsServer,json=dnsServer,proto3" json:"DnsServer,omitempty"`
	DnsSubNet            string     `protobuf:"bytes,5,opt,name=DnsSubNet,json=dns_sub_net,proto3" json:"DnsSubNet,omitempty"`
	Bypass               bool       `protobuf:"varint,6,opt,name=Bypass,json=bypass,proto3" json:"Bypass,omitempty"`
	HTTPHost             string     `protobuf:"bytes,7,opt,name=HTTPHost,json=httpProxyAddress,proto3" json:"HTTPHost,omitempty"`
	Socks5Host           string     `protobuf:"bytes,8,opt,name=Socks5Host,json=socks5ProxyAddress,proto3" json:"Socks5Host,omitempty"`
	RedirHost            string     `protobuf:"bytes,9,opt,name=RedirHost,json=redir_proxy_address,proto3" json:"RedirHost,omitempty"`
	BypassFile           string     `protobuf:"bytes,10,opt,name=BypassFile,json=bypassFile,proto3" json:"BypassFile,omitempty"`
	SsrPath              string     `protobuf:"bytes,11,opt,name=SsrPath,json=ssrPath,proto3" json:"SsrPath,omitempty"`
	DirectDNS            *DirectDNS `protobuf:"bytes,12,opt,name=DirectDNS,json=direct_dns,proto3" json:"DirectDNS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc332a44e926b360, []int{0}
}

func (m *Setting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Setting.Unmarshal(m, b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return xxx_messageInfo_Setting.Size(m)
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetBlackIcon() bool {
	if m != nil {
		return m.BlackIcon
	}
	return false
}

func (m *Setting) GetDOH() bool {
	if m != nil {
		return m.DOH
	}
	return false
}

func (m *Setting) GetDNSProxy() bool {
	if m != nil {
		return m.DNSProxy
	}
	return false
}

func (m *Setting) GetDnsServer() string {
	if m != nil {
		return m.DnsServer
	}
	return ""
}

func (m *Setting) GetDnsSubNet() string {
	if m != nil {
		return m.DnsSubNet
	}
	return ""
}

func (m *Setting) GetBypass() bool {
	if m != nil {
		return m.Bypass
	}
	return false
}

func (m *Setting) GetHTTPHost() string {
	if m != nil {
		return m.HTTPHost
	}
	return ""
}

func (m *Setting) GetSocks5Host() string {
	if m != nil {
		return m.Socks5Host
	}
	return ""
}

func (m *Setting) GetRedirHost() string {
	if m != nil {
		return m.RedirHost
	}
	return ""
}

func (m *Setting) GetBypassFile() string {
	if m != nil {
		return m.BypassFile
	}
	return ""
}

func (m *Setting) GetSsrPath() string {
	if m != nil {
		return m.SsrPath
	}
	return ""
}

func (m *Setting) GetDirectDNS() *DirectDNS {
	if m != nil {
		return m.DirectDNS
	}
	return nil
}

type DirectDNS struct {
	Host                 string   `protobuf:"bytes,1,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	DOH                  bool     `protobuf:"varint,2,opt,name=DOH,json=doh,proto3" json:"DOH,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectDNS) Reset()         { *m = DirectDNS{} }
func (m *DirectDNS) String() string { return proto.CompactTextString(m) }
func (*DirectDNS) ProtoMessage()    {}
func (*DirectDNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc332a44e926b360, []int{1}
}

func (m *DirectDNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectDNS.Unmarshal(m, b)
}
func (m *DirectDNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectDNS.Marshal(b, m, deterministic)
}
func (m *DirectDNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectDNS.Merge(m, src)
}
func (m *DirectDNS) XXX_Size() int {
	return xxx_messageInfo_DirectDNS.Size(m)
}
func (m *DirectDNS) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectDNS.DiscardUnknown(m)
}

var xxx_messageInfo_DirectDNS proto.InternalMessageInfo

func (m *DirectDNS) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DirectDNS) GetDOH() bool {
	if m != nil {
		return m.DOH
	}
	return false
}

func init() {
	proto.RegisterType((*Setting)(nil), "yuhaiin.api.Setting")
	proto.RegisterType((*DirectDNS)(nil), "yuhaiin.api.DirectDNS")
}

func init() {
	proto.RegisterFile("config/config.proto", fileDescriptor_cc332a44e926b360)
}

var fileDescriptor_cc332a44e926b360 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x15, 0x5a, 0x92, 0x66, 0xc2, 0xa1, 0x78, 0xa5, 0x95, 0x0f, 0x50, 0x55, 0x45, 0xa0,
	0x9e, 0x52, 0x01, 0xda, 0x07, 0xd8, 0x2a, 0x42, 0xe5, 0x52, 0xaa, 0x64, 0x4f, 0x5c, 0x22, 0xc7,
	0xf1, 0x36, 0xd6, 0x2e, 0x76, 0xe4, 0x71, 0x56, 0xf4, 0x89, 0x78, 0x4d, 0xe4, 0x49, 0xa9, 0x2a,
	0x4e, 0x89, 0xff, 0xff, 0xf3, 0xcc, 0x9f, 0xcc, 0xc0, 0x8d, 0xb4, 0xe6, 0x51, 0x1f, 0x37, 0xe3,
	0x23, 0xef, 0x9d, 0xf5, 0x96, 0x65, 0xa7, 0xa1, 0x13, 0x5a, 0x9b, 0x5c, 0xf4, 0x7a, 0xf5, 0x67,
	0x02, 0x49, 0xa5, 0xbc, 0xd7, 0xe6, 0xc8, 0xde, 0x43, 0xba, 0x7d, 0x16, 0xf2, 0xe9, 0xbb, 0xb4,
	0x86, 0x47, 0xcb, 0x68, 0x3d, 0x2b, 0xa1, 0x09, 0x42, 0xad, 0xa5, 0x35, 0x6c, 0x01, 0x93, 0xe2,
	0xc7, 0x8e, 0xbf, 0x22, 0xe3, 0xad, 0xc6, 0xba, 0x35, 0x58, 0xdb, 0x17, 0xe5, 0xea, 0xce, 0xfb,
	0x1e, 0xd9, 0x0a, 0x66, 0xc5, 0xbe, 0x3a, 0x38, 0xfb, 0xfb, 0xc4, 0x27, 0x04, 0xcd, 0x03, 0x21,
	0xa4, 0xb3, 0x88, 0x75, 0x1f, 0x74, 0xf6, 0x0e, 0xd2, 0xc2, 0x60, 0xa5, 0xdc, 0x8b, 0x72, 0x7c,
	0xba, 0x8c, 0xd6, 0x69, 0x99, 0xb6, 0xff, 0x04, 0xb6, 0x18, 0xdd, 0xa1, 0xd9, 0x2b, 0xcf, 0x5f,
	0x93, 0x9b, 0x85, 0x12, 0x38, 0x34, 0xb5, 0x51, 0x9e, 0xdd, 0x42, 0xbc, 0x3d, 0xf5, 0x02, 0x91,
	0xc7, 0x54, 0x3f, 0x6e, 0xe8, 0x14, 0x3a, 0xef, 0x1e, 0x1e, 0x0e, 0x3b, 0x8b, 0x9e, 0x27, 0x74,
	0x6d, 0x1e, 0x22, 0x51, 0x94, 0xfb, 0xb6, 0x75, 0x0a, 0x91, 0x7d, 0x02, 0xa8, 0xac, 0x7c, 0xc2,
	0x3b, 0xa2, 0x66, 0x44, 0x31, 0x24, 0xe5, 0x3f, 0x2e, 0x2d, 0x55, 0xab, 0x1d, 0x61, 0x29, 0x61,
	0x37, 0x2e, 0x08, 0xe3, 0x17, 0xd4, 0xe2, 0xcc, 0x2d, 0x00, 0xc6, 0x2c, 0xdf, 0xf4, 0xb3, 0xe2,
	0x40, 0x20, 0x34, 0x17, 0x85, 0x71, 0x48, 0x2a, 0x74, 0x07, 0xe1, 0x3b, 0x9e, 0x91, 0x99, 0xe0,
	0x78, 0x64, 0x77, 0x90, 0x16, 0xda, 0x29, 0xe9, 0x8b, 0x7d, 0xc5, 0xdf, 0x2c, 0xa3, 0x75, 0xf6,
	0xe5, 0x36, 0xbf, 0x9a, 0x49, 0x7e, 0x71, 0x4b, 0x68, 0xe9, 0x35, 0xfc, 0xe9, 0xd5, 0xe7, 0xab,
	0x6b, 0x8c, 0xc1, 0x94, 0x02, 0x46, 0x54, 0x7a, 0xda, 0x59, 0xf4, 0x6c, 0x7e, 0x3d, 0x9f, 0x49,
	0x6b, 0xbb, 0xed, 0xc7, 0x9f, 0x1f, 0x8e, 0xda, 0x77, 0x43, 0x93, 0x4b, 0xfb, 0x6b, 0x73, 0x8f,
	0x83, 0xb7, 0x6e, 0x78, 0x14, 0x9b, 0x73, 0xb3, 0xf3, 0x5a, 0x34, 0x31, 0xed, 0xc5, 0xd7, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xd3, 0x03, 0x23, 0x2e, 0x02, 0x00, 0x00,
}
