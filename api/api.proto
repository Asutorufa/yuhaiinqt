syntax = "proto3";

package yuhaiin.api;

option go_package = "github.com/Asutorufa/yuhaiin/api";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "config/config.proto";

//protoc -I "./" -I "../" --go_out=plugins=grpc:. --go_opt=paths=source_relative api.proto

service processInit{
  rpc CreateLockFile(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc ProcessInit(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc GetRunningHost(google.protobuf.Empty)returns(google.protobuf.StringValue);
  rpc ClientOn(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc ProcessExit(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc GetKernelPid(google.protobuf.Empty)returns(google.protobuf.UInt32Value);
  rpc StopKernel(google.protobuf.Empty)returns(google.protobuf.Empty);

  rpc SingleInstance(stream google.protobuf.StringValue)returns(stream google.protobuf.StringValue);
}

service config{
  rpc GetConfig(google.protobuf.Empty)returns(yuhaiin.api.Setting);
  rpc SetConfig(yuhaiin.api.Setting)returns(google.protobuf.Empty);
  rpc ReimportRule(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc getRate(google.protobuf.Empty)returns(stream DaUaDrUr);
}

message DaUaDrUr{
  string Download = 1;
  string Upload = 2;
  string DownRate = 3;
  string UpRate = 4;
}

service Node {
  rpc GetNodes(google.protobuf.Empty)returns(nodes);
  rpc GetGroup(google.protobuf.Empty)returns(allGroupOrNode);
  rpc GetNode(google.protobuf.StringValue)returns(allGroupOrNode);
  rpc GetNowGroupAndName(google.protobuf.Empty)returns(GroupAndNode);
  rpc ChangeNowNode(GroupAndNode)returns(google.protobuf.Empty);

  rpc AddNode(nodeMap)returns(google.protobuf.Empty);
  rpc ModifyNode(nodeMap)returns(google.protobuf.Empty);
  rpc DeleteNode(GroupAndNode)returns(google.protobuf.Empty);

  rpc Latency(GroupAndNode)returns(google.protobuf.StringValue);
}

message nodeMap{
  map <string,string> Value = 1;
}

message nodes {
  map<string,allGroupOrNode> value = 1;
}

message allGroupOrNode {
  repeated string value = 1;
}

message GroupAndNode{
  string group = 1;
  string node = 2;
}

service Subscribe {
  rpc UpdateSub(google.protobuf.Empty)returns(google.protobuf.Empty);
  rpc GetSubLinks(google.protobuf.Empty)returns(Links);
  rpc AddSubLink(Link)returns(Links);
  rpc DeleteSubLink(google.protobuf.StringValue)returns(Links);
}

message Link {
  string name = 1;
  string url = 2;
  string type = 3;
}

message Links{
  map<string,Link> Value = 1;
}
